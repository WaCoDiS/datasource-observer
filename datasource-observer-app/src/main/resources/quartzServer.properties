# RMI configuration to make the client to connect to the Quartz server
org.quartz.scheduler.rmi.export: true
org.quartz.scheduler.rmi.createRegistry: true
org.quartz.scheduler.rmi.registryHost: localhost
org.quartz.scheduler.rmi.registryPort: 1099
org.quartz.threadPool.class: org.quartz.simpl.SimpleThreadPool
org.quartz.threadPool.threadCount: 2

#Quartz Server Properties
quartz.scheduler.instanceName: ServerScheduler
org.quartz.scheduler.instanceId: AUTO
org.quartz.scheduler.skipUpdateCheck: true
org.quartz.scheduler.instanceId: NON_CLUSTERED
org.quartz.scheduler.jobFactory.class: org.quartz.simpl.SimpleJobFactory
org.quartz.jobStore.class: org.quartz.impl.jdbcjobstore.JobStoreTX
org.quartz.jobStore.driverDelegateClass: org.quartz.impl.jdbcjobstore.StdJDBCDelegate
org.quartz.jobStore.dataSource: quartzDataSource
org.quartz.jobStore.tablePrefix: QRTZ_
org.quartz.jobStore.isClustered: false

# H2 DATABASE CONFIGURATION
# If we do not specify this configuration, QUARTZ will use RAM(in-memory) to store jobs
# Once we restart QUARTZ, the jobs will not be persisted
# Configure your H2 properties
# org.quartz.jobStore.class: org.quartz.simpl.RAMJobStore
org.quartz.dataSource.quartzDataSource.driver: org.h2.Driver
# org.quartz.dataSource.quartzDataSource.URL: jdbc:h2:./src/main/resources/h2_Jobstore
org.quartz.dataSource.quartzDataSource.URL: jdbc:h2:file:/h2_Jobstore
org.quartz.dataSource.quartzDataSource.user: sa
org.quartz.dataSource.quartzDataSource.password: 
org.quartz.dataSource.quartzDataSource.maxConnections: 2